name: Deploy to EC2

on:
  push:
    branches:
      - main
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  PROJECT_DIR: /opt/app/almarac

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-image.outputs.image_tag }}
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTION }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_URI: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT

  deploy-web-server:
    name: Deploy Web Server
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    if: success() && needs.build-and-push-to-ecr.outputs.image_uri != ''

    steps:
      - name: Deploy to Web Server EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WEB_SERVER_HOST }}
          username: ${{ secrets.WEB_SERVER_USER }}
          key: ${{ secrets.WEB_SERVER_SSH_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Deploying to Web Server..."
            PROJECT_PATH="${{ env.PROJECT_DIR }}" # Define once

            # Navigate to project directory, or clone if it doesn't exist
            if [ ! -d "$PROJECT_PATH" ]; then
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_PATH"
              cd "$PROJECT_PATH"
            else
              echo "Repository exists, pulling latest changes..."
              cd "$PROJECT_PATH"
              git checkout main # Or your default branch
              git pull origin main # Or your default branch
            fi

            echo "Creating/Updating .env file for web server..."
            echo "${{ secrets.ENV_FILE_WEB_PROD }}" > "$PROJECT_PATH/.env"

            echo "Logging in to ECR (needed for pull)..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            echo "Pulling latest image from ECR..."
            docker pull ${{ needs.build-and-push-to-ecr.outputs.image_uri }}
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

            echo "Stopping and removing old web containers..."
            cd "$PROJECT_PATH" # Ensure we are in the project directory
            if [ -f docker-compose.web.yml ]; then
              docker compose -f docker-compose.web.yml down || echo "No containers were running or compose file issue."
            else
              echo "docker-compose.web.yml not found!"
              exit 1
            fi

            echo "Starting new web containers..."
            # Ensure the .env file provides the correct image tag if needed, or rely on :latest
            # For simplicity, this example assumes docker-compose.web.yml uses image: $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker compose -f docker-compose.web.yml up -d

            echo "Cleaning up old Docker images..."
            docker image prune -af || echo "Docker image prune failed or no images to prune."

            echo "Web server deployment complete."

  deploy-database-server:
    name: Deploy Database Server (Code Sync Only)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr

    steps:
      - name: Sync code to Database Server EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DB_SERVER_HOST }}
          username: ${{ secrets.DB_SERVER_USER }}
          key: ${{ secrets.DB_SERVER_SSH_KEY }}
          script: |
            set -e
            echo "Syncing code to Database Server..."
            PROJECT_PATH="${{ env.PROJECT_DIR }}"

            if [ ! -d "$PROJECT_PATH" ]; then
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_PATH"
              cd "$PROJECT_PATH"
            else
              echo "Repository exists, pulling latest changes..."
              cd "$PROJECT_PATH"
              git checkout main 
              git pull origin main
            fi

            echo "Creating/Updating .env file for database server..."
            echo "${{ secrets.ENV_FILE_DB_PROD }}" > "$PROJECT_PATH/.env"

            echo "Code sync to database server complete."
            echo "MANUAL STEP REQUIRED: If changes were made to docker-compose.db.yml or .env,"
            echo "connect to the database server (e.g., via SSM Session Manager) and run:"
            echo "cd ${{ env.PROJECT_DIR }} && docker compose -f docker-compose.db.yml up -d"
